// <auto-generated/>

#nullable disable

using System;
using System.ClientModel;
using System.ClientModel.Primitives;
using System.Threading.Tasks;

namespace OpenAI.FineTuning
{
    // Data plane generated sub-client.
    public partial class FineTuningClient
    {
        private const string AuthorizationHeader = "Authorization";
        private readonly ApiKeyCredential _keyCredential;
        private const string AuthorizationApiKeyPrefix = "Bearer";
        private readonly ClientPipeline _pipeline;
        private readonly Uri _endpoint;

        public virtual ClientPipeline Pipeline => _pipeline;

        protected FineTuningClient()
        {
        }

        internal FineTuningClient(ClientPipeline pipeline, ApiKeyCredential keyCredential, Uri endpoint)
        {
            _pipeline = pipeline;
            _keyCredential = keyCredential;
            _endpoint = endpoint;
        }

        internal PipelineMessage CreateCreateFineTuningJobRequest(BinaryContent content, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            UriBuilder uriBuilder = new UriBuilder(_endpoint);
            
            uriBuilder.AppendPath("/fine_tuning/jobs", false);
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            request.Headers.Set("Content-Type", "application/json");
            request.Content = content;
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetPaginatedFineTuningJobsRequest(string after, int? limit, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new UriBuilder(_endpoint);
            
            uriBuilder.AppendPath("/fine_tuning/jobs", false);
            if (after != null)
            {
                uriBuilder.AppendQuery("after", after, true);
            }
            if (limit != null)
            {
                uriBuilder.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateRetrieveFineTuningJobRequest(string fineTuningJobId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new UriBuilder(_endpoint);
            
            uriBuilder.AppendPath("/fine_tuning/jobs/", false);
            uriBuilder.AppendPath(fineTuningJobId, true);
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateCancelFineTuningJobRequest(string fineTuningJobId, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "POST";
            UriBuilder uriBuilder = new UriBuilder(_endpoint);
            
            uriBuilder.AppendPath("/fine_tuning/jobs/", false);
            uriBuilder.AppendPath(fineTuningJobId, true);
            uriBuilder.AppendPath("/cancel", false);
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetFineTuningJobCheckpointsRequest(string fineTuningJobId, string after, int? limit, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new UriBuilder(_endpoint);
            
            uriBuilder.AppendPath("/fine_tuning/jobs/", false);
            uriBuilder.AppendPath(fineTuningJobId, true);
            uriBuilder.AppendPath("/checkpoints", false);
            if (after != null)
            {
                uriBuilder.AppendQuery("after", after, true);
            }
            if (limit != null)
            {
                uriBuilder.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        internal PipelineMessage CreateGetFineTuningEventsRequest(string fineTuningJobId, string after, int? limit, RequestOptions options)
        {
            var message = _pipeline.CreateMessage();
            message.ResponseClassifier = PipelineMessageClassifier200;
            var request = message.Request;
            request.Method = "GET";
            UriBuilder uriBuilder = new UriBuilder(_endpoint);
            
            uriBuilder.AppendPath("/fine_tuning/jobs/", false);
            uriBuilder.AppendPath(fineTuningJobId, true);
            uriBuilder.AppendPath("/events", false);
            if (after != null)
            {
                uriBuilder.AppendQuery("after", after, true);
            }
            if (limit != null)
            {
                uriBuilder.AppendQuery("limit", limit.Value, true);
            }
            request.Uri = uriBuilder.Uri;
            request.Headers.Set("Accept", "application/json");
            message.Apply(options);
            return message;
        }

        private static PipelineMessageClassifier _pipelineMessageClassifier200;
        private static PipelineMessageClassifier PipelineMessageClassifier200 => _pipelineMessageClassifier200 ??= PipelineMessageClassifier.Create(stackalloc ushort[] { 200 });
    }
}
