// <auto-generated/>

using System;
using OpenAI.ClientShared.Internal;
using System.ClientModel.Primitives;
using System.Collections.Generic;
using System.Text.Json;
using System.ClientModel;
using System.Threading.Tasks;
using System.IO;
using System.Net.Http;
using System.Runtime.InteropServices.ComTypes;
using OpenAI.Audio;
using System.Net.Http.Headers;
using System.Threading;

namespace OpenAI.Internal.Models
{
    internal partial class CreateTranscriptionRequest : IJsonModel<CreateTranscriptionRequest>
    {
        void IJsonModel<CreateTranscriptionRequest>.Write(Utf8JsonWriter writer, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateTranscriptionRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CreateTranscriptionRequest)} does not support '{format}' format.");
            }

            writer.WriteStartObject();
            writer.WritePropertyName("file"u8);
            writer.WriteBase64StringValue(File.ToArray(), "D");
            writer.WritePropertyName("model"u8);
            writer.WriteStringValue(Model.ToString());
            if (OptionalProperty.IsDefined(Language))
            {
                writer.WritePropertyName("language"u8);
                writer.WriteStringValue(Language);
            }
            if (OptionalProperty.IsDefined(Prompt))
            {
                writer.WritePropertyName("prompt"u8);
                writer.WriteStringValue(Prompt);
            }
            if (OptionalProperty.IsDefined(ResponseFormat))
            {
                writer.WritePropertyName("response_format"u8);
                writer.WriteStringValue(ResponseFormat.Value.ToString());
            }
            if (OptionalProperty.IsDefined(Temperature))
            {
                writer.WritePropertyName("temperature"u8);
                writer.WriteNumberValue(Temperature.Value);
            }
            if (options.Format != "W" && _serializedAdditionalRawData != null)
            {
                foreach (var item in _serializedAdditionalRawData)
                {
                    writer.WritePropertyName(item.Key);
#if NET6_0_OR_GREATER
				writer.WriteRawValue(item.Value);
#else
                    using (JsonDocument document = JsonDocument.Parse(item.Value))
                    {
                        JsonSerializer.Serialize(writer, document.RootElement);
                    }
#endif
                }
            }
            writer.WriteEndObject();
        }

        CreateTranscriptionRequest IJsonModel<CreateTranscriptionRequest>.Create(ref Utf8JsonReader reader, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateTranscriptionRequest>)this).GetFormatFromOptions(options) : options.Format;
            if (format != "J")
            {
                throw new FormatException($"The model {nameof(CreateTranscriptionRequest)} does not support '{format}' format.");
            }

            using JsonDocument document = JsonDocument.ParseValue(ref reader);
            return DeserializeCreateTranscriptionRequest(document.RootElement, options);
        }

        internal static CreateTranscriptionRequest DeserializeCreateTranscriptionRequest(JsonElement element, ModelReaderWriterOptions options = null)
        {
            options ??= new ModelReaderWriterOptions("W");

            if (element.ValueKind == JsonValueKind.Null)
            {
                return null;
            }
            BinaryData file = default;
            CreateTranscriptionRequestModel model = default;
            OptionalProperty<string> language = default;
            OptionalProperty<string> prompt = default;
            OptionalProperty<CreateTranscriptionRequestResponseFormat> responseFormat = default;
            OptionalProperty<double> temperature = default;
            IDictionary<string, BinaryData> serializedAdditionalRawData = default;
            Dictionary<string, BinaryData> additionalPropertiesDictionary = new Dictionary<string, BinaryData>();
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("file"u8))
                {
                    file = BinaryData.FromBytes(property.Value.GetBytesFromBase64("D"));
                    continue;
                }
                if (property.NameEquals("model"u8))
                {
                    model = new CreateTranscriptionRequestModel(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("language"u8))
                {
                    language = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("prompt"u8))
                {
                    prompt = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("response_format"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    responseFormat = new CreateTranscriptionRequestResponseFormat(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("temperature"u8))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    temperature = property.Value.GetDouble();
                    continue;
                }
                if (options.Format != "W")
                {
                    additionalPropertiesDictionary.Add(property.Name, BinaryData.FromString(property.Value.GetRawText()));
                }
            }
            serializedAdditionalRawData = additionalPropertiesDictionary;
            return new CreateTranscriptionRequest(file, model, language.Value, prompt.Value, OptionalProperty.ToNullable(responseFormat), OptionalProperty.ToNullable(temperature), serializedAdditionalRawData);
        }

        BinaryData IPersistableModel<CreateTranscriptionRequest>.Write(ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateTranscriptionRequest>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    return ModelReaderWriter.Write(this, options);
                default:
                    throw new FormatException($"The model {nameof(CreateTranscriptionRequest)} does not support '{options.Format}' format.");
            }
        }

        CreateTranscriptionRequest IPersistableModel<CreateTranscriptionRequest>.Create(BinaryData data, ModelReaderWriterOptions options)
        {
            var format = options.Format == "W" ? ((IPersistableModel<CreateTranscriptionRequest>)this).GetFormatFromOptions(options) : options.Format;

            switch (format)
            {
                case "J":
                    {
                        using JsonDocument document = JsonDocument.Parse(data);
                        return DeserializeCreateTranscriptionRequest(document.RootElement, options);
                    }
                default:
                    throw new FormatException($"The model {nameof(CreateTranscriptionRequest)} does not support '{options.Format}' format.");
            }
        }

        string IPersistableModel<CreateTranscriptionRequest>.GetFormatFromOptions(ModelReaderWriterOptions options) => "J";

        /// <summary> Deserializes the model from a raw response. </summary>
        /// <param name="response"> The result to deserialize the model from. </param>
        internal static CreateTranscriptionRequest FromResponse(PipelineResponse response)
        {
            using var document = JsonDocument.Parse(response.Content);
            return DeserializeCreateTranscriptionRequest(document.RootElement);
        }

        private MultipartFormDataContent _multipartContent = default;
        internal async Task<BinaryContent> ToBinaryContentAsync(CancellationToken cancellationToken = default)
        {
            // In the current implementation, calling this method overrides any cached content.
            // TODO: is that the behavior we want?
            _multipartContent = new();

            _multipartContent.Add(new StringContent(Model.ToString()), name: "model");

            if (Language is not null)
            {
                _multipartContent.Add(new StringContent(Language), name: "language");
            }

            if (Prompt is not null)
            {
                _multipartContent.Add(new StringContent(Prompt), name: "prompt");
            }

            if (ResponseFormat is not null)
            {
                _multipartContent.Add(new StringContent(ResponseFormat.ToString()), name: "response_format");
            }

            if (Temperature is not null)
            {
                // TODO: preferred way to handle floats/numerics?
                _multipartContent.Add(new StringContent($"{Temperature}"), name: "temperature");
            }

            // TODO: is granularities handled this way?
            //if (enableWordTimestamps is not null ||
            //    enableSegmentTimestamps is not null)
            //{
            //    // TODO: preferred way to serialize models?
            //    List<string> granularities = [];
            //    if (enableWordTimestamps == true)
            //    {
            //        granularities.Add("word");
            //    }
            //    if (enableSegmentTimestamps == true)
            //    {
            //        granularities.Add("segment");
            //    }
            //    byte[] data = JsonSerializer.SerializeToUtf8Bytes(_serializedAdditionalRawData);
            //    content.Add(new ByteArrayContent(data), name: "timestamp_granularities");
            //}

            // TODO: Better to take the stream as an input parameter?
            // TODO: if we need to use BinaryData, is it better to call ToArray/ToStream/other for perf?

            // TODO: I think we need to add the content header manually because the
            // default implementation is adding a `filename*` parameter to the header,
            // which RFC 7578 says not to do -- I am following up with the BCL team
            // on this to learn more about when this is/isn't needed.

            // TODO: plumb through filename... need to know where it comes from in the TypeSpec
            HttpContent audioContent = new ByteArrayContent(File.ToArray());
            ContentDispositionHeaderValue header = new ContentDispositionHeaderValue("form-data")
            {
                Name = "file",
                //FileName = filename
            };
            audioContent.Headers.ContentDisposition = header;
            _multipartContent.Add(audioContent);

            // TODO: take a cancellation token?  Show this for both net6.0 and netstandard2.0.
            Stream stream = await _multipartContent.ReadAsStreamAsync().ConfigureAwait(false);
            return BinaryContent.Create(stream);
        }
    }
}
