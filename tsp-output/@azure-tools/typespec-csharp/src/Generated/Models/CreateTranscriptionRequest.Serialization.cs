// <auto-generated/>

#nullable disable

using System.ClientModel;
using System.ClientModel.Primitives;
using System.IO;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace OpenAI.Models
{
    public partial class CreateTranscriptionRequest
    {
        internal async Task<(BinaryContent, string, RequestOptions)> ToMultipartContentAsync()
        {
            // TODO: add boundary
            MultipartFormDataContent content = new();

            // TODO: take filename?  Something needed in TSP to support this?
            content.Add(new StreamContent(File), "file");
            content.Add(new StringContent(Model.ToString()), "model");

            if (Language is not null)
            {
                content.Add(new StringContent(Language), "language");
            }

            if (Prompt is not null)
            {
                content.Add(new StringContent(Prompt), "prompt");
            }

            if (ResponseFormat is not null)
            {
                content.Add(new StringContent(ResponseFormat.ToString()), "response_format");
            }

            if (Temperature is not null)
            {
                // TODO: preferred way to handle floats/numerics?
                content.Add(new StringContent($"{Temperature}"), "temperature");
            }

            
            string contentType = default;
            if (content.Headers.ContentType is MediaTypeHeaderValue contentTypeValue)
            {
                contentType = contentTypeValue.ToString();
            }

            // TODO: transfer all headers instead of a few?
            RequestOptions options = new();
            if (content.Headers.ContentLength is long contentLength)
            {
                options.SetHeader("Content-Length", contentLength.ToString());
            }

            Stream stream = await content.ReadAsStreamAsync().ConfigureAwait(false);
            return (BinaryContent.Create(stream), contentType, options);
        }
    }
}
